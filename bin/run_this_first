#!/usr/bin/env ruby

# frozen_string_literal: true

require "colorator"
require "fileutils"
require "os"
require "tty-prompt"
require "git"

module JekyllTimeSinceModule
  class ScriptHelper
    def initialize
      @prompt = TTY::Prompt.new
    end

    def ask(prompt, default_value = nil)
      if default_value
        @prompt.ask(prompt.cyan, :value => default_value)
      else
        @prompt.ask(prompt.cyan)
      end
    end

    def edit_contents(filename, edits)
      contents = File.read(filename)
      edits.each do |old_str, new_str|
        contents.gsub!(old_str, new_str)
      end
      File.write(filename, contents)
    end

    def run(command)
      `#{command}`.chomp
    end

    def to_camel_case(string)
      string.split("_").collect(&:capitalize).join
    end
  end

  class RunThisFirst < ScriptHelper
    def initialize(work_dir = Dir.pwd)
      super()
      Dir.chdir(work_dir)
      @old_name = "jekyll_time_since"
    end

    def create_repo
      unless run("which gh")
        puts "gh is not installed, so you will have to push the new git repo to the hosting service of your choice".red
        exit
      end
      unless run("gh auth status").include? "Logged in to github.com"
        puts "gh is not logged in, so you will have to push the new git repo to the hosting service of your choice".red
      end
      if @prompt.yes?("Create a GitHub project for this new git repository?".cyan)
        visibility = @prompt.select("Public or private?", %w(public private))
        `gh repo create #{@git_repo_name} --#{visibility}` # See https://cli.github.com/manual/gh_repo_create
        puts "A #{visibility} git repository called #{git_repo_name} has been created.".cyan
      end
    end

    def delete_run_this_first
      File.rm "bin/run_this_first"
      ["bin/setup", "README.md"].each do |filename|
        modified = File.readlines(filename).reject { |f| %r!run_this_first!.match(f) }
        File.write(filename, modified.join)
      end
    end

    def delete_tests_and_data
      File.rm_rf "spec/runs_this_first*"
    end

    def edit_license
      edits = {
        "2022"            => Date.today.year.to_s,
        "COPYRIGHT_OWNER" => get_copyright_holder,
      }
      edit_contents(edits, "LICENSE.txt")
    end

    def edit_readme
      edits = { "git_user_name" => @git_user_name }
      edit_contents(edits, "README.md")
    end

    def help
      msg = <<~END_HELP
        This script customizes your new Jekyll plugin gem.
        It does the following:
        1) Renames the Jekyll template, including directories, files and contents.
        2) Deletes itself, its tests and its test data.
        3) Does not delete tests for the Jekyll plugin.
        4) Removes information about itself from README.md
        5) Initializes a new local git repository and optionally creates a public or private project on GitHub.
        6) Provides scripts for building and testing your new Jekyll plugin gem locally.

        The customized gem is ready to be pushed to RubyGems.org, or any other Ruby gem repository, whenever your feel ready.
      END_HELP
      msg.cyan
      exit
    end

    def obtain_copyright_holder
      done = false
      answer = ""
      loop do
        answer = ask("Please specify the name of the copyright holder for this Jekyll plugin:")
        if answer.nil?
          puts "You must specify a name. Please try again.".red
        else
          done = true
        end
        break if done
      end
      answer
    end

    def obtain_git_repo_name
      git_repo_name = ""
      want_name = @prompt.yes?("Do you want to give a name to the new git repository for this Jekyll plugin gem?".cyan)
      return git_repo_name unless want_name

      loop do
        git_repo_name = ask("What name do you want to give to the git repo?", git_repo_name)
        if git_repo_name.nil?
          puts "You did not specify a name. Please try again.".red
        elsif git_repo_name.include?(" ")
          puts "The name must not contain spaces. Please try again.".red
        else
          break
        end
      end
      git_repo_name
    end

    def obtain_git_user_name
      loop do
        git_user_name = ask("What is your git user name?", git_user_name)
        if git_user_name.nil?
          puts "You did not specify a name. Please try again.".red
        elsif git_user_name.include?(" ")
          puts "The name must not contain spaces. Please try again.".red
        else
          break
        end
      end
      git_user_name
    end

    def obtain_new_name(new_name)
      answer = ""
      loop do
        answer = ask("Please specify the name of this plugin in snake_case:", new_name)
        if answer.nil?
          puts "You must specify a name. Please try again.".red
        elsif answer.include?(" ")
          puts "The name must not contain spaces. Please try again.".red
        else
          break
        end
      end
      answer
    end

    def process
      Dir.chdir `git rev-parse --show-toplevel`.chomp

      @new_name = obtain_new_name("jekyll_time_since")
      rename_directories(@old_name, @new_name)
      rename_files(@old_name, @new_name)
      rename_identifiers(@old_name, @new_name)

      @copyright_holder = obtain_copyright_holder
      edit_license

      delete_run_this_first
      delete_tests_and_data

      `git remote rename origin upstream`

      @git_user_name = obtain_git_user_name
      edit_readme

      @git_user_name = obtain_git_user_name
      create_repo @git_user_name
    end

    def rename_directories(old_name, new_name)
      Dir["**/*"]
        .select { |x| File.directory?(x) && x.include?(old_name) }
        .each do |directory|
          renamed_directory = directory.gsub(old_name, new_name)
          File.rename directory, renamed_directory
        end
    end

    def rename_path(path, old_name, new_name)
      dirname = File.dirname(path)
      dirname = dirname == "." ? "" : "#{dirname}/"
      filetype = File.extname(path)
      filename = File.basename(path).sub(filetype, "").sub(old_name, new_name)
      "#{dirname}#{filename}#{filetype}"
    end

    def rename_files(old_name, new_name)
      Dir["**/#{old_name}*.*"]
        .select { |x| File.file? x }
        .each do |path|
          File.rename(path, rename_path(path, old_name, new_name))
        end
    end

    def rename_identifiers(old_name, new_name)
      camel_case_old = to_camel_case(old_name)
      camel_case_new = to_camel_case(new_name)
      files = Dir["**/*"]
      files.select! { |x| File.file? x }
      files.reject! { |x| x.include?("/.git/") || x.include?("/pkg/") }
      files.each do |filename|
        edits = {
          old_name       => new_name,
          camel_case_old => camel_case_new,
        }
        edit_contents(filename, edits)
      end
    end

    def verify_logged_in
      if run("which gh").empty?
        msg = <<~MSG
          This project needs to be pushed to a new git repo at a hosting service like GitHub.
          The gh cli would need to be installed if you want this script to create a repo for you on GitHub.
        MSG
        puts msg.red
        if @prompt.yes?("Do you want to install the gh cli before continuing?".cyan)
          puts "Be sure to run 'gh auth' to log in before rerunning this script.".cyan
          puts "See https://cli.github.com/".cyan
          exit
        end
      end
      run("gh auth login") unless run("gh auth status 2>&1").include?("Logged in to")
    end
  end
end

# Invoke this code this way:
# $ ruby bin/run_this_first
if __FILE__ == $PROGRAM_NAME
  require "pathname"
  require "colorator"

  begin
    project_root = Pathname.new(__dir__).parent.to_s
    puts "Executing from #{project_root}".cyan

    include JekyllTimeSinceModule

    run_this_first = RunThisFirst.new(project_root)
    old_name = "jekyll_time_since"
    new_name = run_this_first.obtain_new_name(old_name)

    run_this_first.rename_identifiers(old_name, new_name)
    run_this_first.rename_directories(old_name, new_name)
    run_this_first.rename_files(old_name, new_name)

    # puts run_this_first.obtain_copyright_holder
    # run_this_first.verify_logged_in
    # run_this_first.process
  rescue SystemExit, Interrupt
    puts "\nTerminated".cyan
  rescue StandardError => e
    puts e.message.red
  end
end
